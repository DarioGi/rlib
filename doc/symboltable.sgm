<chapter label="3" id="symboltable">
	<title>RLIB Function Table</title>
	<sect1>
		<title></title>
		<para>
			In the definitions below; expN means a number expressions, expS means a string expression, and
			expD means a date expression.
		</para>
	</sect1>
	<sect1>
		<title>+</title>
		<para>
			expN1 + expN2 <emphasis>Returns</emphasis> NUMBER containing the result of expN1 plus expN2
		</para>
		<para>
			expD + expN or expN + expD <emphasis>Returns</emphasis> DATE contains the result of expD + expN days
		</para>
		<para>
			expS1 + expS2 <emphasis>Returns</emphasis> STRING containing the result of the concatination of expS1 and expS2
		</para>
	</sect1>
	<sect1>
		<title>&dash;</title>
		<para>
			expN1 - expN2 <emphasis>Returns</emphasis> NUMBER contain the result of expN1 minus expN2
		</para>
		<para>
			expD - expN <emphasis>Returns</emphasis> DATE contains the result of expD - expN of days
		</para>
	</sect1>
	<sect1>
		<title>*</title>
		<para>
			expN1 * expN2 <emphasis>Returns</emphasis> NUMBER containing the result of expN1 times expN2
		</para>
	</sect1>	
	<sect1>
		<title>/</title>
		<para>
			expN1 / expN2 <emphasis>Returns</emphasis> NUMBER containing the result of expN1 divided by expN2
		</para>
	</sect1>	
	<sect1>
		<title>%</title>
		<para>
			expN1 % expN2 <emphasis>Returns</emphasis> NUMBER containing the result of expN1 mod expN2
		</para>
	</sect1>	
	<sect1>
		<title>^</title>
		<para>
			expN1 ^ expN2 <emphasis>Returns</emphasis> NUMBER containing the result of expN1 to the expN2
		</para>
	</sect1>	
	<sect1>
		<title>&lt=</title>
		<para>
			expN1 &lt= expN1 <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			expS1 &lt= expS2 <emphasis>Returns</emphasis> NUMBER 1 if true if expS1 is alphebatically less then expS2.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>&lt</title>
		<para>
			expN1 &lt expN2 <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			expS1 &lt expS2 <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>&gt=</title>
		<para>
			expN1 &gt= expN2 <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			expS1 &gt= expS2 <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>&gt</title>
		<para>
			NUMBER &gt NUMBER <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			STRING &gt STRING <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>==</title>
		<para>
			NUMBER == NUMBER <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			STRING == STRING <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			DATE == DATE <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>!=</title>
		<para>
			NUMBER != NUMBER <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			STRING != STRING <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			DATE != DATE <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
	</sect1>	
	<sect1>
		<title>&amp;&amp;</title>
		<para>
			LOGICAL "AND". iif(m.test1 == 22 && m.test2 == 17, 'passed', 'failed')
		</para>
		<para>
			NUMBER &amp;&amp; NUMBER <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			STRING &amp;&amp; STRING <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false .. True if both strings are not null
		</para>
		<para>
			DATE &amp;&amp; DATE <emphasis>Returns</emphasis> NUMBER 1
		</para>
	</sect1>	
	<sect1>
		<title>||</title>
		<para>
			NUMBER || NUMBER <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false
		</para>
		<para>
			STRING || STRING <emphasis>Returns</emphasis> NUMBER 1 if true.. 0 if false . True if at least 1 of the strings is not null
		</para>
		<para>
			DATE || DATE <emphasis>Returns</emphasis> NUMBER 1
		</para>
	</sect1>	
	<sect1>
		<title>abs(expN)</title>
		<para>
			Absolute Value.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>ceil(expN)</title>
		<para>
			Round up to the nearest integer.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>floor(expN)</title>
		<para>
			Round down to the nearest integer.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>round(expN)</title>
		<para>
			Round to nearest integer
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>sin(expN)</title>
		<para>
			 The sin() function Returns the sine of expN, where expN is given in radians.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>cos(expN)</title>
		<para>
			 The cos() function Returns the cosine of expN, where expN is given in radians.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>ln(expN)</title>
		<para>
			 The ln() function Returns the natural logarithm of of expN.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>exp(expN)</title>
		<para>
			 The exp() function Returns the value of e (the base of natural logarithms) raised to the power of expN
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>					
	<sect1>
		<title>atan(expN)</title>
		<para>
			 The atan()  function calculates the arc tangent of expN; that is the value whose tangent is expN.
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>sqrt(expN)</title>
		<para>
			 The sqrt() function Returns the non-negative square root of expN.  Don't pass it a negative number or it will fail I think
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>val(expS)</title>
		<para>
			 Converts a string into a number.. respects the decimal point in a string
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>		
	<sect1>
		<title>fxpval(expS, expN)</title>
		<para>
			 Converts a string into a number.. assumes no decimal places in the string.. expN says where the decimal place should go
			 for instance if in your database you store all values in cents.. and not dollars
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>		
	<sect1>
		<title>str(expN1, expN2, expN3)</title>
		<para>
			 Convert a NUMBER into a STRING of length expN2 with decimal percision of expN3
		</para>
		<para>
			<emphasis> Returns</emphasis> STRING
		</para>
	</sect1>	
	<sect1>
		<title>stod(expS)</title>
		<para>
			 Converts a string into a date.. must be int he format of YYYY-MM-DD (like sql)
		</para>
		<para>
			<emphasis> Returns</emphasis> DATE
		</para>
	</sect1>
	<sect1>
		<title>iif(exp1, exp2, exp3)</title>
		<para>
			 In-line If. Basically exp1 is evaulated. If it is true (NUMBER != 0, STRING != NULL, DATE is always true).. exp2
			 is evaulated and returned otherwise exp3 is evaluated and returned
		</para>
		<para>
			<emphasis> Returns</emphasis> exp2 if TRUE... exp3 if FALSE
		</para>
	</sect1>	
	<sect1>
		<title>dtos(expD)</title>
		<para>
			 Converts a date into a string. The string will be YYYY-MM-DD
		</para>
		<para>
			<emphasis> Returns</emphasis> STRING
		</para>
	</sect1>
	<sect1>
		<title>year(expD)</title>
		<para>
			 Returns YYYY as NUMBER
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>month(expD)</title>
		<para>
			 Returns MM as NUMBER
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>day(expD)</title>
		<para>
			 Returns DD as NUMBER
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>upper(expS)</title>
		<para>
			 Returns expS as a upper case string
		</para>
		<para>
			<emphasis> Returns</emphasis> STRING
		</para>
	</sect1>	
	<sect1>
		<title>lower(expS)</title>
		<para>
			 Returns expS as a lower case string
		</para>
		<para>
			<emphasis> Returns</emphasis> STRING
		</para>
	</sect1>	
	<sect1>
		<title>proper(expS)</title>
		<para>
			 Returns expS as a proper string.. ie 1str char caps.. all the rest lower
		</para>
		<para>
			<emphasis> Returns</emphasis> STRING
		</para>
	</sect1>	
	<sect1>
		<title>stodt(expS)</title>
		<para>
			 Converts a string into a date time.. must be int he format of YYYYMMDDHHMMSS (like sql)
		</para>
		<para>
			<emphasis> Returns</emphasis> DATE
		</para>
	</sect1>
	<sect1>
		<title>isnull(expS)</title>
		<para>
			 Returns expN 1 if expS is null or expN 0 if expS is not null
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>	
	<sect1>
		<title>dim(expD)</title>
		<para>
			 Returns NUMBER containting the day in the month (1-31)
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>wiy(expD)</title>
		<para>
			 Returns NUMBER containting the week number of the year.  Range  00  to  53, starting with the first
          Sunday as the first day of week 01
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>		
	<sect1>
		<title>wiyo(expD, expN)</title>
		<para>
			 Returns NUMBER containing the week number of the year.  Range  00  to  53, starting with the first
          expN as the first day (1=Monday, 2=Tuesday...)
		</para>
		<para>
			<emphasis> Returns</emphasis> NUMBER
		</para>
	</sect1>		
	<sect1>
		<title>date()</title>
		<para>
			Returns the current date time in RLIB DATE Format
		</para>
		<para>
			<emphasis> Returns</emphasis> DATE
		</para>
	</sect1>		
	<sect1>
		<title>left(expS, expN)</title>
		<para>
			Returns the leftmost expN characters of the string expS.
		</para>
		<para>
			<emphasis>Returns</emphasis> STRING
		</para>
	</sect1>
	<sect1>
		<title>right(expS, expN)</title>
		<para>
			Returns the rightmost expN characters of the string expS.
		</para>
		<para>
			<emphasis>Returns</emphasis> STRING
		</para>
	</sect1>
	<sect1>
		<title>mid(expS, expN1, expN2)</title>
		<para>
			expN1 is an index into the string expS starting at 0.
			expN2 is the maximum length of the result string.
		</para>
		<para>
			<emphasis>Returns</emphasis> STRING
		</para>
	</sect1>
	<sect1>
		<title>tstod(expS)</title>
		<para>
			expS is a time in string format such as HH:MM, HH:MM:SS,
		HH:MMp, HH:MM:SSp, HHMM, HHMMSS, HHMMp, HHMMSSp. This function 
		will return a DATE value with the time set to the time in the
		string (the date part of the DATE variable is set to 1/1/1980).
		</para>
		<para>
			<emphasis>Returns</emphasis> DATE
		</para>
	</sect1>
	<sect1>
		<title>dtosf(expD, expS)</title>
		<para>
			Convert date expD to string using the specified format
		expS. expS uses the formatting controls listed below and can be used 
		to display either the date or time of the DATE variable.
		</para>
		<para>
			<emphasis>Returns</emphasis> STRING
		</para>
	</sect1>
	<sect1>
		<title>true</title>
		<para>
			A predefined NUMBER variable with the value 1.
		</para>
		<para>
			<emphasis>Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>yes</title>
		<para>
			A predefined NUMBER variable with the value 1.
		</para>
		<para>
			<emphasis>Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>false</title>
		<para>
			A predefined NUMBER variable with the value 0.
		</para>
		<para>
			<emphasis>Returns</emphasis> NUMBER
		</para>
	</sect1>
	<sect1>
		<title>no</title>
		<para>
			A predefined NUMBER variable with the value 0.
		</para>
		<para>
			<emphasis>Returns</emphasis> NUMBER
		</para>
	</sect1>




</chapter>
