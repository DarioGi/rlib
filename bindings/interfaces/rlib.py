# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rlib', [dirname(__file__)])
        except ImportError:
            import _rlib
            return _rlib
        if fp is not None:
            try:
                _mod = imp.load_module('_rlib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rlib = swig_import_helper()
    del swig_import_helper
else:
    import _rlib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def rlib_init():
  return _rlib.rlib_init()
rlib_init = _rlib.rlib_init

def rlib_add_datasource_mysql(*args):
  return _rlib.rlib_add_datasource_mysql(*args)
rlib_add_datasource_mysql = _rlib.rlib_add_datasource_mysql

def rlib_add_datasource_postgres(*args):
  return _rlib.rlib_add_datasource_postgres(*args)
rlib_add_datasource_postgres = _rlib.rlib_add_datasource_postgres

def rlib_add_datasource_odbc(*args):
  return _rlib.rlib_add_datasource_odbc(*args)
rlib_add_datasource_odbc = _rlib.rlib_add_datasource_odbc

def rlib_add_datasource_xml(*args):
  return _rlib.rlib_add_datasource_xml(*args)
rlib_add_datasource_xml = _rlib.rlib_add_datasource_xml

def rlib_add_datasource_csv(*args):
  return _rlib.rlib_add_datasource_csv(*args)
rlib_add_datasource_csv = _rlib.rlib_add_datasource_csv

def rlib_add_query_as(*args):
  return _rlib.rlib_add_query_as(*args)
rlib_add_query_as = _rlib.rlib_add_query_as

def rlib_add_report(*args):
  return _rlib.rlib_add_report(*args)
rlib_add_report = _rlib.rlib_add_report

def rlib_add_report_from_buffer(*args):
  return _rlib.rlib_add_report_from_buffer(*args)
rlib_add_report_from_buffer = _rlib.rlib_add_report_from_buffer

def rlib_execute(*args):
  return _rlib.rlib_execute(*args)
rlib_execute = _rlib.rlib_execute

def rlib_get_content_type_as_text(*args):
  return _rlib.rlib_get_content_type_as_text(*args)
rlib_get_content_type_as_text = _rlib.rlib_get_content_type_as_text

def rlib_spool(*args):
  return _rlib.rlib_spool(*args)
rlib_spool = _rlib.rlib_spool

def rlib_set_output_format(*args):
  return _rlib.rlib_set_output_format(*args)
rlib_set_output_format = _rlib.rlib_set_output_format

def rlib_add_resultset_follower_n_to_1(*args):
  return _rlib.rlib_add_resultset_follower_n_to_1(*args)
rlib_add_resultset_follower_n_to_1 = _rlib.rlib_add_resultset_follower_n_to_1

def rlib_add_resultset_follower(*args):
  return _rlib.rlib_add_resultset_follower(*args)
rlib_add_resultset_follower = _rlib.rlib_add_resultset_follower

def rlib_set_output_format_from_text(*args):
  return _rlib.rlib_set_output_format_from_text(*args)
rlib_set_output_format_from_text = _rlib.rlib_set_output_format_from_text

def rlib_get_output(*args):
  return _rlib.rlib_get_output(*args)
rlib_get_output = _rlib.rlib_get_output

def rlib_get_output_length(*args):
  return _rlib.rlib_get_output_length(*args)
rlib_get_output_length = _rlib.rlib_get_output_length

def rlib_signal_connect(*args):
  return _rlib.rlib_signal_connect(*args)
rlib_signal_connect = _rlib.rlib_signal_connect

def rlib_signal_connect_string(*args):
  return _rlib.rlib_signal_connect_string(*args)
rlib_signal_connect_string = _rlib.rlib_signal_connect_string

def rlib_query_refresh(*args):
  return _rlib.rlib_query_refresh(*args)
rlib_query_refresh = _rlib.rlib_query_refresh

def rlib_add_parameter(*args):
  return _rlib.rlib_add_parameter(*args)
rlib_add_parameter = _rlib.rlib_add_parameter

def rlib_set_locale(*args):
  return _rlib.rlib_set_locale(*args)
rlib_set_locale = _rlib.rlib_set_locale

def rlib_bindtextdomain(*args):
  return _rlib.rlib_bindtextdomain(*args)
rlib_bindtextdomain = _rlib.rlib_bindtextdomain

def rlib_set_output_parameter(*args):
  return _rlib.rlib_set_output_parameter(*args)
rlib_set_output_parameter = _rlib.rlib_set_output_parameter

def rlib_set_output_encoding(*args):
  return _rlib.rlib_set_output_encoding(*args)
rlib_set_output_encoding = _rlib.rlib_set_output_encoding

def rlib_set_datasource_encoding(*args):
  return _rlib.rlib_set_datasource_encoding(*args)
rlib_set_datasource_encoding = _rlib.rlib_set_datasource_encoding

def rlib_free(*args):
  return _rlib.rlib_free(*args)
rlib_free = _rlib.rlib_free

def rlib_version():
  return _rlib.rlib_version()
rlib_version = _rlib.rlib_version

def rlib_graph_add_bg_region(*args):
  return _rlib.rlib_graph_add_bg_region(*args)
rlib_graph_add_bg_region = _rlib.rlib_graph_add_bg_region

def rlib_graph_clear_bg_region(*args):
  return _rlib.rlib_graph_clear_bg_region(*args)
rlib_graph_clear_bg_region = _rlib.rlib_graph_clear_bg_region

def rlib_graph_set_x_minor_tick(*args):
  return _rlib.rlib_graph_set_x_minor_tick(*args)
rlib_graph_set_x_minor_tick = _rlib.rlib_graph_set_x_minor_tick

def rlib_graph_set_x_minor_tick_by_location(*args):
  return _rlib.rlib_graph_set_x_minor_tick_by_location(*args)
rlib_graph_set_x_minor_tick_by_location = _rlib.rlib_graph_set_x_minor_tick_by_location

def rlib_graph(*args):
  return _rlib.rlib_graph(*args)
rlib_graph = _rlib.rlib_graph


